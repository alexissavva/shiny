fifa19_init <- read.csv(file = "country.csv",sep=";")
country <- fifa19_init[c("country")]
#print(table(country))
map <- as.data.frame(table(country))
View(map)
fifa19_init <- read.csv(file = "country.csv",sep=";")
country <- fifa19_init[c("country")]
View(fifa19_init)
#print(table(country))
map <- as.data.frame(country)
View(map)
country <- fifa19_init[c("country")]
View(country)
fifa19_init <- read.csv(file = "country.csv",sep=";")
country <- fifa19_init[c("country")]
View(country)
fifa19_init <- read.csv(file = "country.csv",sep=";")
View(fifa19_init)
map <- read.csv(file = "country.csv",sep=";")
data(world.cities)
force(world.cities)
# merge the desired cols from that data frame with yours by country
df <- world.cities %>%
filter(capital == 1) %>%
dplyr::select(country = country.etc, lat, lng = long) %>%
left_join(map, ., by = "country")
View(df)
# now map the result
leaflet(df)%>%
addTiles()%>%
addMarkers(label = ~n)
library(dplyr)
library(leaflet)
library(maps)
library(plyr)
library(tidyverse)
library(fmsb)
cnt_country <- read.table(text = "Morocco,57381\nFrance,35729\nTunisia,85563\nSaudi Arabia,10816\nTurkey,6725",
sep = ",",
header = FALSE,
stringsAsFactors = FALSE,
col.names = c("country", "n"))
View(cnt_country)
typeof(cnt_country)
map <- read.csv(file = "country.csv",sep=";")
type(map)
typeof(map)
# merge the desired cols from that data frame with yours by country
df <- world.cities %>%
filter(capital == 1) %>%
dplyr::select(country = country.etc, lat, lng = long) %>%
left_join(cnt_country, ., by = "country")
# now map the result
leaflet(df)%>%
addTiles()%>%
addMarkers(label = ~n)
View(df)
View(map)
df2 <- world.cities %>%
filter(capital == 1) %>%
dplyr::select(country = country.etc, lat, lng = long) %>%
left_join(map, ., by = "country")
View(df2)
View(df)
map <- read.csv(file = "country.csv",sep=";")
names(map)[names(map) == "Freq"] <- "n"
c
library(dplyr)
library(leaflet)
library(maps)
library(plyr)
library(tidyverse)
library(fmsb)
cnt_country <- read.table(text = "Morocco,57381\nFrance,35729\nTunisia,85563\nSaudi Arabia,10816\nTurkey,6725",
sep = ",",
header = FALSE,
stringsAsFactors = FALSE,
col.names = c("country", "n"))
map <- read.csv(file = "country.csv",sep=";")
names(map)[names(map) == "Freq"] <- "n"
# import the world.cities data frame from 'maps'
data(world.cities)
# merge the desired cols from that data frame with yours by country
df <- world.cities %>%
filter(capital == 1) %>%
dplyr::select(country = country.etc, lat, lng = long) %>%
left_join(cnt_country, ., by = "country")
df2 <- world.cities %>%
filter(capital == 1) %>%
dplyr::select(country = country.etc, lat, lng = long) %>%
left_join(map, ., by = "country")
# now map the result
leaflet(df)%>%
addTiles()%>%
addMarkers(label = ~n)
# now map the result
leaflet(df2)%>%
addTiles()%>%
addMarkers(label = ~n)
View(df2)
View(world.cities)
library(dplyr)
world_spdf@data$POP2005[ which(world_spdf@data$POP2005 == 0)] = NA
world_spdf@data$POP2005 <- as.numeric(as.character(world_spdf@data$POP2005)) / 1000000 %>% round(2)
world_spdf <- readOGR(
dsn= paste0(getwd(),"/DATA/world_shape_file/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf@data$POP2005[ which(world_spdf@data$POP2005 == 0)] = NA
world_spdf@data$POP2005 <- as.numeric(as.character(world_spdf@data$POP2005)) / 1000000 %>% round(2)
View(world_spdf)
world_spdf@data[["POP2005"]]
world_spdf@data[["LON"]]
world_spdf@data[["NAME"]]
world_spdf@data[["LON"]]
world_spdf@data[["LAT"]]
all <- world_spdf@data[["NAME"]]
data(all)
all <- list(all)
View(all)
all <- data(all)
all <- world_spdf@data[["NAME"]]
all <- data(all)
all <- world_spdf@data[["NAME"]]
as.list(strsplit(all, "")[[1]])
all <- world_spdf@data[["NAME"]]
as.list(all)
all <- world_spdf@data[["NAME"]]
all <-as.list(all)
View(all)
all <- world_spdf@data[["NAME"]]
all <- world_spdf@data[["NAME"]]
print(all)
print(type(all))
all <- world_spdf@data[["NAME"]]
print(typeof(all))
all <- world_spdf@data[c("NAME")]
View(all)
View(cnt_country)
View(map)
runApp()
shiny::runApp()
library(dplyr)
library(leaflet)
library(maps)
library(plyr)
library(tidyverse)
library(fmsb)
cnt_country <- read.table(text = "Morocco,57381\nFrance,35729\nTunisia,85563\nSaudi Arabia,10816\nTurkey,6725",
sep = ",",
header = FALSE,
stringsAsFactors = FALSE,
col.names = c("country", "n"))
map <- read.csv(file = "country.csv",sep=";")
names(map)[names(map) == "Freq"] <- "n"
# import the world.cities data frame from 'maps'
data(world.cities)
# merge the desired cols from that data frame with yours by country
df <- world.cities %>%
filter(capital == 1) %>%
dplyr::select(country = country.etc, lat, lng = long) %>%
left_join(cnt_country, ., by = "country")
df2 <- world.cities %>%
filter(capital == 1) %>%
dplyr::select(country = country.etc, lat, lng = long) %>%
left_join(map, ., by = "country")
# now map the result
leaflet(df2)%>%
addTiles()%>%
addMarkers(label = ~n)
View(df2)
print(typeof(all))
m <- leaflet(df2)%>% addTiles()  %>% setView( lat=10, lng=0 , zoom=2) %>%
addPolygons( stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~colorQuantile("YlOrRd", POP2005)(POP2005) )
leaflet(df2)%>% addTiles()  %>% setView( lat=10, lng=0 , zoom=2) %>% addPolygons( stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~colorQuantile("YlOrRd", POP2005)(POP2005) )
# now map the result
leaflet(df2)%>%
addTiles()%>%
addMarkers(label = ~n)
world_spdf@data$POP2005[ which(world_spdf@data$POP2005 == 0)] = NA
world_spdf@data$POP2005 <- as.numeric(as.character(world_spdf@data$POP2005)) / 1000000 %>% round(2)
mypalette <- colorNumeric( palette="viridis", domain=world_spdf@data$POP2005, na.color="transparent")
mypalette(c(45,43))
# Basic choropleth with leaflet?
m <- leaflet(world_spdf) %>%
addTiles()  %>%
setView( lat=10, lng=0 , zoom=2) %>%
addPolygons( fillColor = ~mypalette(POP2005), stroke=FALSE )
m
View(world_spdf)
View(df2)
# now map the result
leaflet(df2)%>%
addTiles()%>%
addMarkers(label = ~n)
View(df2)
View(df2)
bin <- bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, 1500)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
pal <- colorBin("YlOrRd", domain = df2$n, bins = bins)
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, 1500)
pal <- colorBin("YlOrRd", domain = df2$n, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
df2$country, df2$n
) %>% lapply(htmltools::HTML)
leaflet(df2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~n, opacity = 0.7, title = NULL,
position = "bottomright")
m <- leaflet(states) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
df2$country, df2$n
) %>% lapply(htmltools::HTML)
m <- leaflet(df2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m
# Basic choropleth with leaflet?
m <- leaflet(world_spdf) %>%
addTiles()  %>%
setView( lat=10, lng=0 , zoom=2) %>%
addPolygons( fillColor = ~mypalette(POP2005), stroke=FALSE )
m
m <- leaflet(df2) %>%
setView( lat=10, lng=0 , zoom=2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m
m <- leaflet(df2) %>%
m <- leaflet(df2) %>%
setView( lat=10, lng=0 , zoom=2) %>%
addTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m <- leaflet(df2) %>%
setView( lat=10, lng=0 , zoom=2) %>%
addTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m
m %>% addPolygons()
# Basic choropleth with leaflet?
m <- leaflet(world_spdf) %>%
addTiles()  %>%
setView( lat=10, lng=0 , zoom=2) %>%
addPolygons( fillColor = ~mypalette(POP2005), stroke=FALSE )
m
leaflet(df2)%>% addTiles()%>% setView( lat=10, lng=0 , zoom=2) %>% addPolygons( stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~colorQuantile("YlOrRd", POP2005)(POP2005) )
# now map the result
leaflet(df2)%>%
addTiles()%>%
addMarkers(label = ~n)
# now map the result
leaflet(df2)%>%
addTiles()%>%
#addMarkers(label = ~n)
addPolygons()
m2 <- leaflet(df2)%>%
addTiles()%>%
#addMarkers(label = ~n)
addPolygons()
m2<- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m2<- leaflet(df2) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m2
df2 <- world.cities %>%
filter(capital == 1) %>%
dplyr::select(country = country.etc, lat, lng = long) %>%
left_join(map, ., by = "country")
m2 <- leaflet(df2)
m2
m2 <- leaflet(df2)%>%
addTiles()%>%
m2<- leaflet(df2) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m2 <- leaflet(df2)%>%
addTiles()%>%
m2
m2 <- leaflet(df2)%>%
addTiles()
m2
m2 <- leaflet(df2)%>%
addTiles()%>%
setView( lat=10, lng=0 , zoom=2)
m2
m2 <- leaflet(df2)%>%
addTiles()%>%
setView( lat=10, lng=10 , zoom=2)
m2
m2 <- leaflet(df2)%>%
addTiles()%>%
setView( lat=10, lng=10 , zoom=1)
m2
m2 <- leaflet(df2)%>%
addTiles()%>%
setView( lat=10, lng=10 , zoom=1)
m2
m2 <- leaflet(df2)%>%
addTiles()%>%
setView( lat=10, lng=10 , zoom=1)
m2 %>% addPolygons()
states <- geojsonio::geojson_read("../../us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("../../us-states.json", what = "sp")
states <- geojsonio::geojson_read("../../us-states.js", what = "sp")
states <- geojsonio::geojson_read("../../us-states.js", what = "sp")
states <- geojsonio::geojson_read("../../us-states.js", what = "sp")
library(geojsonio)
states <- geojsonio::geojson_read("../../us-states.js", what = "sp")
states <- geojsonio::geojson_read("../../us-states.geojson", what = "sp")
library(geojsonio)
states <- geojsonio::geojson_read("../../us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("../../us-states.geojson", what = "sp")
library(geojsonio)
states <- geojsonio::geojson_read("../../us-states.geojson", what = "sp")
st_drivers()
library(geojsonio)
states <- geojsonio::geojson_read("../../us-states.js", what = "sp")
library(rgdal)
states <- geojsonio::geojson_read("../../us-states.js", what = "sp")
library(geojsonio)
library(rgdal)
states <- rgdal::readOGR("json/nycounties.geojson")
states <- rgdal::readOGR("../../us-states.geojson")
library(geojsonio)
library(rgdal)
states <- rgdal::readOGR("../../us-states.geojson")
library(geojsonio)
library(rgdal)
states <- rgdal::readOGR("us-states.geojson")
library(geojsonio)
library(rgdal)
states <- geojsonio::geojson_read("../../us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
states <- geojson_read("us-states.geojson", what = "sp")
states <- system.file("us-states.geojson", what = "sp")
names(states)
states <- system.file("us-states.geojson", what = "sp")
names(states)
states <- system.file("us-states.geojson", what = "spData")
names(states)
st_write(gjsf, "us-states.geojson")
states <- system.file("us-states.geojson", what = "spData")
names(states)
gjsf = st_read(states)
library(rgdal)
library(rjson)
states <- fromJSON("us-states.geojson")
library(rjson)
states <- fromJSON(file = "us-states.geojson")
library(rjson)
states <- fromJSON(file = "us-states.json")
library(geojsonio)
library(rgdal)
library(rjson)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
View(pal)
states <- NULL
names(states)
library(rjson)
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
library(rjson)
states <- geojsonio::geojson_read("us.geosjon", what = "sp")
library(rjson)
states <- geojsonio::geojson_read("us.geojson", what = "sp")
library(rjson)
states <- geojsonio::geojson_read("us.geojson", what = "sp")
library(rjson)
states <- geojsonio::geojson_read("us-states.js", what = "sp")
library(rjson)
states <- geojsonio::geojson_read("data.json", what = "sp")
states <- geojsonio::geojson_read("data.json")
library(rjson)
#states <- geojsonio::geojson_read("data.json")
result <- fromJSON(file = "data.json")
names(states)
names(result)
View(result)
library(rjson)
states <- fromJSON(file = "data.json")
library(rjson)
states <- fromJSON(file = "data.json")
View(states)
leaflet(df2) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(n),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~n, opacity = 0.7, title = NULL,
position = "bottomright")
shiny::runApp()
runApp()
library(geojsonio)
library(rgdal)
library(rjson)
states <- fromJSON(file = "us-states.js")
states <- fromJSON(file = "us-states.js")
View(states)
library(geojsonio)
library(rgdal)
library(rjson)
states <- fromJSON(file = "us-states.js")
View(states)
library(rgdal)
library(rjson)
states <- fromJSON(file = "us-states.js",what = "sp")
states <- fromJSON(file = "us-states.js")
class(states)
library(geojsonio)
library(rgdal)
library(rjson)
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
library(geojsonio)
library(rgdal)
library(rjson)
library(geojsonR)
file_js = FROM_GeoJson(url_file_string = "us-states.geojson")
library(geojsonR)
file_js = FROM_GeoJson(url_file_string = "us-states.geojson")
file_js = FROM_GeoJson(url_file_string = "us-states.geojson")
library(rgdal)
library(rjson)
library(geojsonR)
file_js = FROM_GeoJson(url_file_string = "us-states.geojson")
file_js = FROM_GeoJson(url_file_string = "us-states.geojson")
file_js = FROM_GeoJson(url_file_string = "us-states.geojson")
library(geojsonio)
library(rgdal)
library(rjson)
library(geojsonR)
file_js = FROM_GeoJson(url_file_string = "countries.geojson")
names(file_js$features[[1]])
print(file_js$resources$name)
file_js = FROM_GeoJson(url_file_string = "countries.geojson")
names(file_js$features[[1]])
class(file_js)
library(rjson)
library(geojsonR)
file_js = FROM_GeoJson(url_file_string = "countries.geojson", what = "sp")
names(file_js$features[[1]])
file_js = FROM_GeoJson(url_file_string = "countries.geojson")
names(file_js$features[[1]])
class(file_js)
class(file_js)
names(file_js)
names(file_js$features)
names(file_js$features[[1]])
file_js = FROM_GeoJson(url_file_string = "countries.geojson")
View(file_js)
str(file_js)
summary(file_js$features[[1]])
str(file_js$features[[1]]$geometry)
file_js$features[[1]]$geometry$coordinates
file_js$features[[1]]$geometry$coordinates
str(file_js$features[[1]]$properties)
shiny::runApp()
